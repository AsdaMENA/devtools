const { resolve, basename } = require('path');
const { readFile, existsSync, readdirSync, writeFileSync } = require('fs');
const Packet = require('./util/packet');

const AsdaVersion = {
	Asda2English: {
		keys: Buffer.from([
			0xe8, 0x40, 0xb8, 0xb7, 0x9a, 0x2f, 0x35, 0x63, 0x61, 0xb2, 0xd8,
			0xfe, 0xea, 0x1e, 0xaa, 0x24, 0x65, 0x2e, 0x6d, 0xa1, 0xbe, 0xeb,
			0xc5, 0x91, 0x27, 0xe4, 0x7f, 0xe0, 0xf5, 0xd0, 0xf7, 0x58, 0x80,
			0x66, 0x25, 0x3e, 0xfa, 0x9b, 0x55, 0x69, 0x3c, 0xc6, 0xdb, 0x75,
			0x9f, 0xe1, 0x38, 0x1b, 0x88, 0x9c, 0xe5, 0xab, 0xf6, 0x4b, 0x3d,
			0xd6, 0x79, 0x98, 0x96, 0x62, 0xb3, 0x05, 0xef, 0x5f, 0x78, 0x1a,
			0x5c, 0x77, 0x71, 0xe6, 0x3f, 0x76, 0xf8, 0x6b, 0xa6, 0x28, 0xe9,
			0x8f, 0xac, 0xc1, 0x12, 0xa0, 0x54, 0x81, 0xde, 0x5a, 0x1f, 0xdd,
			0x7b, 0xf1, 0x21, 0x00, 0x0c, 0xbc, 0x90, 0x68, 0xe7, 0x34, 0xf0,
			0xdf, 0x09, 0x67, 0x8d, 0x10, 0xcb, 0xc4, 0x32, 0x45, 0xd1, 0x2a,
			0x95, 0x8e, 0x7d, 0x0e, 0x39, 0x03, 0x97, 0xcd, 0xfd, 0x7c, 0xce,
			0xa3, 0x7a, 0xb6, 0x02, 0x72, 0xf9, 0xae, 0x20, 0x30, 0x48, 0xd3,
			0x31, 0xee, 0x60, 0x16, 0x87, 0x11, 0x84, 0x08, 0xda, 0x43, 0x42,
			0x64, 0xd2, 0x74, 0xcc, 0x4c, 0xe2, 0x6c, 0xb5, 0x93, 0x94, 0x86,
			0xbf, 0x1c, 0xd5, 0x51, 0xf3, 0x2c, 0x52, 0x0b, 0xa2, 0xe3, 0x01,
			0xc7, 0xba, 0x3b, 0x8a, 0x57, 0x5e, 0xfb, 0x85, 0x06, 0xfc, 0x4f,
			0xca, 0x4e, 0xa9, 0x6f, 0xbb, 0x17, 0xa7, 0x53, 0x59, 0x2d, 0x18,
			0x50, 0x82, 0xd7, 0xf4, 0x46, 0x13, 0x22, 0x4d, 0xd4, 0x8c, 0x5d,
			0xad, 0x70, 0x0f, 0xb9, 0xa4, 0xdc, 0x56, 0x26, 0xa8, 0x1d, 0xcf,
			0x07, 0x23, 0x15, 0x6a, 0xed, 0x7e, 0x4a, 0x36, 0xaf, 0x29, 0x49,
			0x9e, 0x44, 0x99, 0x0a, 0x73, 0x04, 0x83, 0x8b, 0xc0, 0xb1, 0x6e,
			0x14, 0x47, 0x33, 0xc3, 0x41, 0xec, 0xd9, 0xb0, 0xc2, 0xc8, 0xbd,
			0x92, 0xf2, 0x37, 0x9d, 0x2b, 0xb4, 0xff, 0x0d, 0x19, 0xc9, 0xa5,
			0x3a, 0x5b, 0x89,
		]),
		header: Buffer.from([0xf9, 0x95, 0x09, 0x6f, 0xbb]),
	},
	Asda2Arabic: {
		keys: Buffer.from([
			0xd0, 0x78, 0x80, 0x8f, 0xa2, 0x17, 0x0d, 0x5b, 0x59, 0x8a, 0xe0,
			0xc6, 0xd2, 0x26, 0x92, 0x1c, 0x5d, 0x16, 0x55, 0x99, 0x86, 0xd3,
			0xfd, 0xa9, 0x1f, 0xdc, 0x47, 0xd8, 0xcd, 0xe8, 0xcf, 0x60, 0xb8,
			0x5e, 0x1d, 0x06, 0xc2, 0xa3, 0x6d, 0x51, 0x04, 0xfe, 0xe3, 0x4d,
			0xa7, 0xd9, 0x00, 0x23, 0xb0, 0xa4, 0xdd, 0x93, 0xce, 0x73, 0x05,
			0xee, 0x41, 0xa0, 0xae, 0x5a, 0x8b, 0x3d, 0xd7, 0x67, 0x40, 0x22,
			0x64, 0x4f, 0x49, 0xde, 0x07, 0x4e, 0xc0, 0x53, 0x9e, 0x10, 0xd1,
			0xb7, 0x94, 0xf9, 0x2a, 0x98, 0x6c, 0xb9, 0xe6, 0x62, 0x27, 0xe5,
			0x43, 0xc9, 0x19, 0x38, 0x34, 0x84, 0xa8, 0x50, 0xdf, 0x0c, 0xc8,
			0xe7, 0x31, 0x5f, 0xb5, 0x28, 0xf3, 0xfc, 0x0a, 0x7d, 0xe9, 0x12,
			0xad, 0xb6, 0x45, 0x36, 0x01, 0x3b, 0xaf, 0xf5, 0xc5, 0x44, 0xf6,
			0x9b, 0x42, 0x8e, 0x3a, 0x4a, 0xc1, 0x96, 0x18, 0x08, 0x70, 0xeb,
			0x09, 0xd6, 0x58, 0x2e, 0xbf, 0x29, 0xbc, 0x30, 0xe2, 0x7b, 0x7a,
			0x5c, 0xea, 0x4c, 0xf4, 0x74, 0xda, 0x54, 0x8d, 0xab, 0xac, 0xbe,
			0x87, 0x24, 0xed, 0x69, 0xcb, 0x14, 0x6a, 0x33, 0x9a, 0xdb, 0x39,
			0xff, 0x82, 0x03, 0xb2, 0x6f, 0x66, 0xc3, 0xbd, 0x3e, 0xc4, 0x77,
			0xf2, 0x76, 0x91, 0x57, 0x83, 0x2f, 0x9f, 0x6b, 0x61, 0x15, 0x20,
			0x68, 0xba, 0xef, 0xcc, 0x7e, 0x2b, 0x1a, 0x75, 0xec, 0xb4, 0x65,
			0x95, 0x48, 0x37, 0x81, 0x9c, 0xe4, 0x6e, 0x1e, 0x90, 0x25, 0xf7,
			0x3f, 0x1b, 0x2d, 0x52, 0xd5, 0x46, 0x72, 0x0e, 0x97, 0x11, 0x71,
			0xa6, 0x7c, 0xa1, 0x32, 0x4b, 0x3c, 0xbb, 0xb3, 0xf8, 0x89, 0x56,
			0x2c, 0x7f, 0x0b, 0xfb, 0x79, 0xd4, 0xe1, 0x88, 0xfa, 0xf0, 0x85,
			0xaa, 0xca, 0x0f, 0xa5, 0x13, 0x8c, 0xc7, 0x35, 0x21, 0xf1, 0x9d,
			0x02, 0x63, 0xb1,
		]),
		header: Buffer.from([0xc1, 0xad, 0x36, 0x54, 0x87]),
	},
	Asda3English: {
		keys: Buffer.from([
			0x62, 0x9a, 0x98, 0xa0, 0xf5, 0x6d, 0xbb, 0xb9, 0x02, 0x68, 0x06,
			0xbe, 0x41, 0xe4, 0xe6, 0xb3, 0x01, 0x1c, 0xf4, 0xb8, 0x31, 0x7b,
			0xfd, 0x4b, 0xa5, 0x3e, 0xb0, 0x99, 0x0a, 0x3a, 0x5a, 0x82, 0xff,
			0xbc, 0x40, 0xf2, 0x17, 0xd9, 0x14, 0xa6, 0xa0, 0x79, 0x49, 0x79,
			0x3b, 0xaf, 0x52, 0xc1, 0x3f, 0x46, 0x6f, 0x22, 0x91, 0x71, 0xa3,
			0x0c, 0x4c, 0x42, 0x38, 0x14, 0xdf, 0xb8, 0xa2, 0x85, 0x86, 0xc0,
			0x74, 0x95, 0x3c, 0xad, 0x22, 0xac, 0x7c, 0xb1, 0xe4, 0x63, 0xc4,
			0x24, 0xc3, 0xfe, 0x27, 0xf4, 0x16, 0x20, 0x80, 0x5b, 0xa1, 0x07,
			0xfb, 0x2b, 0xf0, 0x2f, 0xcd, 0xb5, 0x83, 0x89, 0xc2, 0xf7, 0x90,
			0x33, 0xbd, 0x05, 0x11, 0xca, 0xe8, 0x1e, 0x2b, 0x57, 0xf0, 0x9f,
			0xa7, 0x54, 0xe3, 0xd4, 0x62, 0x5e, 0xfc, 0x06, 0x15, 0xc7, 0xf9,
			0xdd, 0xd0, 0x5c, 0xa8, 0x6c, 0xfa, 0x74, 0x92, 0xea, 0x04, 0x4c,
			0x34, 0x09, 0x5d, 0xcc, 0x5e, 0xcb, 0x02, 0xb1, 0x99, 0xd2, 0x08,
			0xbe, 0x16, 0xae, 0x30, 0xec, 0xb6, 0x96, 0x4e, 0x89, 0x65, 0x5c,
			0x60, 0xfb, 0x66, 0xda, 0x3d, 0xb3, 0x2a, 0xee, 0x97, 0x72, 0x1d,
			0x39, 0x50, 0xe1, 0x84, 0x8d, 0x3a, 0x52, 0xdc, 0x21, 0x1c, 0x95,
			0x73, 0x94, 0x50, 0xf8, 0x4b, 0xc6, 0x88, 0xf6, 0x78, 0xd1, 0xd9,
			0xd1, 0x0d, 0x8a, 0xc9, 0x9c, 0x97, 0xf8, 0x87, 0x7c, 0x87, 0x0e,
			0xd5, 0xaa, 0x7e, 0x63, 0x3c, 0x29, 0x03, 0x9b, 0x13, 0x18, 0x48,
			0x67, 0xac, 0xc4, 0x37, 0xcf, 0xec, 0x90, 0xf3, 0x75, 0x9f, 0xe8,
			0x9e, 0x93, 0xa9, 0xd0, 0x59, 0xde, 0xd4, 0xcc, 0x6b, 0x5d, 0x9d,
			0xce, 0x19, 0xe9, 0xdb, 0x88, 0x55, 0xf2, 0xc8, 0x1b, 0x8e, 0x7a,
			0xe2, 0x4a, 0x47, 0x28, 0x25, 0x6e, 0xc3, 0xd7, 0x7e, 0x8c, 0xe0,
			0x13, 0x32, 0x53,
		]),
		header: Buffer.from([0xbc, 0xd0, 0x27, 0x02, 0x6b]),
	},
	Asda3Arabic: {
		keys: Buffer.from([
			0x3e, 0xc6, 0xc4, 0xfc, 0xa9, 0x31, 0xe7, 0xe5, 0x5e, 0x34, 0x5a,
			0xe2, 0x1d, 0xb8, 0xba, 0xef, 0x5d, 0x40, 0xa8, 0xe4, 0x6d, 0x27,
			0xa1, 0x17, 0xf9, 0x62, 0xec, 0xc5, 0x56, 0x66, 0x06, 0xde, 0xa3,
			0xe0, 0x1c, 0xae, 0x4b, 0x85, 0x48, 0xfa, 0xfc, 0x25, 0x15, 0x25,
			0x67, 0xf3, 0x0e, 0x9d, 0x63, 0x1a, 0x33, 0x7e, 0xcd, 0x2d, 0xff,
			0x50, 0x10, 0x1e, 0x64, 0x48, 0x83, 0xe4, 0xfe, 0xd9, 0xda, 0x9c,
			0x28, 0xc9, 0x60, 0xf1, 0x7e, 0xf0, 0x20, 0xed, 0xb8, 0x3f, 0x98,
			0x78, 0x9f, 0xa2, 0x7b, 0xa8, 0x4a, 0x7c, 0xdc, 0x07, 0xfd, 0x5b,
			0xa7, 0x77, 0xac, 0x73, 0x91, 0xe9, 0xdf, 0xd5, 0x9e, 0xab, 0xcc,
			0x6f, 0xe1, 0x59, 0x4d, 0x96, 0xb4, 0x42, 0x77, 0x0b, 0xac, 0xc3,
			0xfb, 0x08, 0xbf, 0x88, 0x3e, 0x02, 0xa0, 0x5a, 0x49, 0x9b, 0xa5,
			0x81, 0x8c, 0x00, 0xf4, 0x30, 0xa6, 0x28, 0xce, 0xb6, 0x58, 0x10,
			0x68, 0x55, 0x01, 0x90, 0x02, 0x97, 0x5e, 0xed, 0xc5, 0x8e, 0x54,
			0xe2, 0x4a, 0xf2, 0x6c, 0xb0, 0xea, 0xca, 0x12, 0xd5, 0x39, 0x00,
			0x3c, 0xa7, 0x3a, 0x86, 0x61, 0xef, 0x76, 0xb2, 0xcb, 0x2e, 0x41,
			0x65, 0x0c, 0xbd, 0xd8, 0xd1, 0x66, 0x0e, 0x80, 0x7d, 0x40, 0xc9,
			0x2f, 0xc8, 0x0c, 0xa4, 0x17, 0x9a, 0xd4, 0xaa, 0x24, 0x8d, 0x85,
			0x8d, 0x51, 0xd6, 0x95, 0xc0, 0xcb, 0xa4, 0xdb, 0x20, 0xdb, 0x52,
			0x89, 0xf6, 0x22, 0x3f, 0x60, 0x75, 0x5f, 0xc7, 0x4f, 0x44, 0x14,
			0x3b, 0xf0, 0x98, 0x6b, 0x93, 0xb0, 0xcc, 0xaf, 0x29, 0xc3, 0xb4,
			0xc2, 0xcf, 0xf5, 0x8c, 0x05, 0x82, 0x88, 0x90, 0x37, 0x01, 0xc1,
			0x92, 0x45, 0xb5, 0x87, 0xd4, 0x09, 0xae, 0x94, 0x47, 0xd2, 0x26,
			0xbe, 0x16, 0x1b, 0x74, 0x79, 0x32, 0x9f, 0x8b, 0x22, 0xd0, 0xbc,
			0x4f, 0x6e, 0x0f,
		]),
		header: Buffer.from([0xe0, 0x8c, 0x7c, 0x56, 0x37]),
	},
};

function fromFile(filename) {
	return new Promise((resolve, reject) => {
		readFile(filename, (err, content) => {
			if (err) return reject(err);

			resolve(content);
		});
	});
}

class AsdaBinary {
	static xor(buffer, keys) {
		for (let i = 0; i < buffer.length; ++i) {
			buffer[i] = (keys[i & 0xff] ^ buffer[i]) & 0xff;
		}
		return buffer;
	}

	static detectVersion(buffer) {
		const h1 = buffer.slice(0, 5);

		for (const version of Object.keys(AsdaVersion)) {
			const { header, keys } = AsdaVersion[version];
			if (header.equals(h1)) {
				return { version, ...AsdaVersion[version] };
			}
		}

		return null;
	}

	static encrypt(buffer, version) {
		return new Promise((resolve, reject) => {
			if (typeof buffer === 'string') {
				fromFile(buffer)
					.then((buffer) => {
						AsdaBinary.encrypt(buffer, version)
							.then(resolve)
							.catch(reject);
					})
					.catch(reject);
			} else {
				if (version?.keys && version?.header) {
					buffer = Buffer.concat([
						version.header,
						AsdaBinary.xor(buffer, version.keys),
					]);
					resolve(buffer);
				} else {
					reject('Invalid version provided.');
				}
			}
		});
	}

	static decrypt(buffer) {
		return new Promise((resolve, reject) => {
			if (typeof buffer === 'string') {
				fromFile(buffer)
					.then((buffer) => {
						AsdaBinary.decrypt(buffer).then(resolve).catch(reject);
					})
					.catch(reject);
			} else {
				const version = AsdaBinary.detectVersion(buffer);
				if (version) {
					buffer = AsdaBinary.xor(buffer.slice(5), version.keys);
					resolve(buffer);
				} else {
					reject('Invalid version detected.');
				}
			}
		});
	}

	static convert(buffer, toVersion) {
		return new Promise((resolve, reject) => {
			if (typeof buffer === 'string') {
				fromFile(buffer)
					.then((buffer) => {
						AsdaBinary.convert(buffer, toVersion)
							.then(resolve)
							.catch(reject);
					})
					.catch(reject);
			} else {
				const fromVersion = AsdaBinary.detectVersion(buffer);
				if (fromVersion) {
					const keys = Buffer.alloc(0x100);
					for (let i = 0; i < keys.length; ++i) {
						keys[i] = (fromVersion[i] ^ toVersion[i]) & 0xff;
					}
					buffer = Buffer.concat([
						toVersion.header,
						AsdaBinary.xor(buffer.slice(5), keys),
					]);
					resolve(buffer);
				} else {
					reject('Invalid version detected.');
				}
			}
		});
	}
}

class AsdaParser {
	static readers = {};

	static initReaders() {
		const files = readdirSync(resolve(__dirname, 'readers/')).filter(
			(file) => file.endsWith('.json')
		);

		for (const file of files) {
			this.readers[basename(file).replace('.json', '')] = require(resolve(
				__dirname,
				'readers/',
				file
			));
		}
	}

	static existReader(type) {
		return (
			type in this.readers ||
			existsSync(resolve(__dirname, 'readers/' + type + '.json'))
		);
	}

	static getReader(type) {
		if (!this.existReader(type)) {
			return null;
		}

		if (this.readers[type]) {
			return this.readers[type];
		}

		this.readers[type] = require(resolve(
			__dirname,
			'readers/' + type + '.json'
		));

		return this.readers[type];
	}

	static registerReader(type, reader) {
		if (!this.existReader(type)) {
			this.readers[type] = reader;

			writeFileSync(
				resolve(__dirname, 'readers', type + '.json'),
				JSON.stringify(reader, null, 4)
			);
		}
	}

	static parse(buffer) {
		let reader = null;

		const packet = new Packet(buffer).position(4);

		const length = packet.readUnsignedInt();

		packet.skip(4);

		const type = packet.readString(4);

		packet.skip(4);

		reader = this.getReader(type);
		if (!reader) {
			throw 'Could not find reader file.';
		}

		if (reader.$structure) {
			const list = this.#read(packet, reader.$structure, length || 1);
			return { reader, data: list };
		}

		return null;
	}

	static generateSQL(reader, data) {
		return this.generateSQLTable(reader) + '\n\n' + this.generateSQLData(reader, data);
	}

	static generateSQLTable(reader) {
		const replaceTable = {
			uint: 'int',
			int: 'int',
			short: 'smallint',
			ushort: 'smallint',
			byte: 'tinyint',
			ubyte: 'tinyint',
			string: 'varchar',
			boolean: 'boolean',
			float: 'float'
		};
		const length = Object.keys(reader.$structure).length;

		let query = `CREATE TABLE \`${reader.$table.toLowerCase()}\` (\n`;
		let i = 0;

		for (const key in reader.$structure) {
			const value = reader.$structure[key];

			i++;

			if (reader.$structure[key].$ignore) continue;

			query += '\t';
			query += `\`${key}\``;
			if (value.$constraints?.type) {
				query += ' ' + value.$constraints.type;
			} else {
				query += ' ' + replaceTable[value.type];
			}

			if (value.length && value.type === 'string') {
				query += '(' + value.length + ')';
			}

			if (value.$constraints?.primaryKey === true) {
				query += ' primary key';
			} else if (value.$constraints?.unique === true) {
				query += ' unique';
			}

			if (value.$constraints?.default) {
				query += ' default ';
				if (typeof value.$constraints.default === 'string') {
					query += '\'' + value.$constraints.default + '\'';
				} else {
					query += value.$constraints.default;
				}
			}

			if (i < length) {
				query += ', ';
			}

			query += '\n';
		}
		query += ');';

		return query;
	}

	static generateSQLData(reader, data) {
		const length = Object.keys(reader.$structure).length;

		let query = '';
		let i = 0;

		for (const item of data) {
			query += 'INSERT INTO ' + reader.$table.toLowerCase() + ' ';
			query += '(';

			i = 0;
			for (const col in item) {
				i++;

				if (reader.$structure[col].$ignore)
					continue;

				query += '`' + col + '`';
				if (i < length) {
					query += ', ';
				}
			}

			query += ') VALUES (';

			i = 0;
			for (const col in item) {
				i++;
				if (reader.$structure[col].$ignore)
					continue;

				if (reader.$structure[col].type === 'string') {
					query += '\'' + item[col] + '\'';
				} else {
					query += item[col];
				}

				if (i < length) {
					query += ', ';
				}
			}

			query += ');';

			query += '\n';
		}
		return query;
	}

	static generateEntity(reader, data) {
		const dbTypes = {
			uint: 'int',
			int: 'int',
			short: 'smallint',
			ushort: 'smallint',
			byte: 'tinyint',
			ubyte: 'tinyint',
			string: 'varchar',
			boolean: 'boolean',
			float: 'float'
		};

		let entity = `import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n`;
		entity += `@Entity({ name: '${reader.$table.toLowerCase()}'})\n`;
		entity += `export default class ${reader.$table} {\n`;

		for (const entry of Object.entries(reader.$structure)) {
			const [key, value] = entry;

			if (reader.$structure[key].$ignore) continue;

			if (value.$constraints?.primaryKey === true) {
				entity += '\t@PrimaryGeneratedColumn';
			} else {
				entity += '\t@Column';
			}
			entity += '({ ';
			entity += 'type: \'' + (value.$constraints?.type || dbTypes[value.type]) + '\'';
			if (value.type.startsWith('u')) {
				entity += ', unsigned: true';
			}
			if (!value.$constraints?.primaryKey && value.$constraints?.unique === true) {
				entity += ', unique: true';
			}
			if (value.$constraints?.default) {
				entity += ', default: ' + (typeof value.$constraints?.default === 'string' ? `'${value.$constraints.default}'` : value.$constraints.default);
			}
			if (value.length && value.type === 'string') {
				entity += ', length: ' + value.length;
			}
			entity += ' })\n';
			entity += '\tpublic ' + key + ': ' + (!['string', 'boolean'].includes(value.type) ? 'number' : value.type);
			entity += ';\n\n';
		}
		entity += '}';
		return entity;
	}

	static #read(packet, structure, length) {
		const list = [];

		const replaceTable = {
			byte: packet.readByte,
			ubyte: packet.readUnsignedByte,
			short: packet.readShort,
			ushort: packet.readUnsignedShort,
			int: packet.readInt,
			uint: packet.readUnsignedInt,
			long: packet.readLong,
			ulong: packet.readUnsignedLong,
			float: packet.readFloat,
			string: packet.readString,
		};

		for (let i = 0; i < length; ++i) {
			const data = {};
			for (const entry of Object.entries(structure)) {
				const [key, v] = entry;

				let value = null;
				if (v.type === 'string') {
					value = replaceTable.string.bind(packet, v.length || 0)();
				} else if (v.type === 'boolean' && v.length) {
					value = packet.readUnsignedInt() === 1;
				} else if (v.type === 'array' && v.element && v.length) {
					value = [];
					for (let i = 0; i < v.length; ++i) {
						if (v.element.type === 'string' && v.element.length) {
							value.push(replaceTable.string.bind(packet, v.element.length || 0)());
						} else if (v.element.type === 'boolean' && v.element.length) {
							value.push(packet.readUnsignedInt() === 1);
						} else {
							value.push(replaceTable[v.type].bind(packet)());
						}
					}
				} else {
					value = replaceTable[v.type].bind(packet)();
				}

				data[key] = value;
			}
			list.push(data);
		}
		return list;
	}
}

module.exports = { AsdaBinary, AsdaParser };
